//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hospital_Entity_Framework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class HospitalDbContext : DbContext
    {
        public HospitalDbContext()
            : base("name=HospitalDbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Account> Accounts { get; set; }
        public DbSet<Consultation> Consultations { get; set; }
        public DbSet<ConsultationCategory> ConsultationCategories { get; set; }
        public DbSet<ConsultationCategoryStatu> ConsultationCategoryStatus { get; set; }
        public DbSet<ConsultationEstimate> ConsultationEstimates { get; set; }
        public DbSet<ConsultationSample> ConsultationSamples { get; set; }
        public DbSet<ConsultationStatu> ConsultationStatus { get; set; }
        public DbSet<Dating> Datings { get; set; }
        public DbSet<Laboratory> Laboratories { get; set; }
        public DbSet<LaboratoryCategory> LaboratoryCategories { get; set; }
        public DbSet<LaboratoryCategoryStatu> LaboratoryCategoryStatus { get; set; }
        public DbSet<LaboratoryEstimate> LaboratoryEstimates { get; set; }
        public DbSet<LaboratorySample> LaboratorySamples { get; set; }
        public DbSet<LaboratoryStatu> LaboratoryStatus { get; set; }
        public DbSet<Management> Managements { get; set; }
        public DbSet<ManagementService> ManagementServices { get; set; }
        public DbSet<MedicalHistory> MedicalHistories { get; set; }
        public DbSet<MedicalImaging> MedicalImagings { get; set; }
        public DbSet<MedicalImagingCategory> MedicalImagingCategories { get; set; }
        public DbSet<MedicalImagingCategoryStatu> MedicalImagingCategoryStatus { get; set; }
        public DbSet<MedicalImagingEstimate> MedicalImagingEstimates { get; set; }
        public DbSet<MedicalImagingSample> MedicalImagingSamples { get; set; }
        public DbSet<MedicalImagingStatu> MedicalImagingStatus { get; set; }
        public DbSet<MedicalRecord> MedicalRecords { get; set; }
        public DbSet<Patient> Patients { get; set; }
        public DbSet<Prescription> Prescriptions { get; set; }
        public DbSet<PrescriptionCategory> PrescriptionCategories { get; set; }
        public DbSet<PrescriptionCategoryStatu> PrescriptionCategoryStatus { get; set; }
        public DbSet<PrescriptionEstimate> PrescriptionEstimates { get; set; }
        public DbSet<PrescriptionSample> PrescriptionSamples { get; set; }
        public DbSet<PrescriptionStatu> PrescriptionStatus { get; set; }
        public DbSet<ServiceCategory> ServiceCategories { get; set; }
        public DbSet<ServiceEstimate> ServiceEstimates { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<VariousDocument> VariousDocuments { get; set; }
        public DbSet<VariousDocumentCategory> VariousDocumentCategories { get; set; }
        public DbSet<VariousDocumentCategoryStatu> VariousDocumentCategoryStatus { get; set; }
        public DbSet<VariousDocumentEstimante> VariousDocumentEstimantes { get; set; }
        public DbSet<VariousDocumentSample> VariousDocumentSamples { get; set; }
        public DbSet<VariousDocumentStatu> VariousDocumentStatus { get; set; }
        public DbSet<Visit> Visits { get; set; }
        public DbSet<VisitService> VisitServices { get; set; }
        public DbSet<Wait> Waits { get; set; }
        public DbSet<Worker> Workers { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
